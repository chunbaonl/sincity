<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="eu.greenhouseinnovation.selly.common.model.dao.TwitterDao">

    <!-- Queries: -->

    <insert id="addConfig" parameterType="TwitterConfig">
        INSERT INTO social_twitter_auth (
            user_id,
            token_key,
            token_secret,
            description,
            username
       ) VALUES (
            #{userId},
            #{config.mTokenKey},
            #{config.mTokenSecret},
            #{config.mDescription},
            #{config.mUserName}
       )
    </insert>

    <insert id="storeTweet" parameterType="TwitterTweet">
        INSERT INTO social_twitter_tweets
        (user_id, tweet_id, twitter_user_id, twitter_name, twitter_user_name, tweet, media_url, profile_image, timestamp)
        SELECT
        #{tweet.mUserId}, #{tweet.mTweetId}, #{tweet.mTwitterUserId}, #{tweet.mTwitterName}, #{tweet.mTwitterUserName}, #{tweet.mTweet}, #{tweet.mMediaUrl}, #{tweet.mProfileImage}, #{tweet.mTimeStamp}
        FROM (SELECT 1) t
        WHERE NOT EXISTS (SELECT 1 FROM social_twitter_tweets WHERE tweet_id = #{tweet.mTweetId})
    </insert>

    <delete id="removeConfig">
        DELETE FROM social_twitter_auth WHERE user_id = #{userId}
    </delete>

    <select id="getConfigForUser" resultMap="TwitterConfigResultMap">
        SELECT * FROM social_twitter_auth WHERE user_id = #{userId}
    </select>

    <select id="getTweetsForUser" resultMap="TwitterTweetResultMap">
        SELECT * FROM social_twitter_tweets WHERE user_id = #{userId}
    </select>

    <select id="getAllConfigsForLocation" resultMap="TwitterConfigResultMap">
        SELECT social_twitter_auth.*
        FROM social_twitter_auth
        INNER JOIN users ON user_id = users.id
        WHERE users.location_origin = #{locationId};
    </select>

    <select id="getLatestStoreTweets" resultMap="TwitterTweetResultMap">
        SELECT * FROM social_twitter_tweets INNER JOIN userstores ON social_twitter_tweets.user_id = userstores.userId ORDER BY timestamp DESC LIMIT #{maxItems}
    </select>

    <select id="getLatestStoreTweetsForLocation" resultMap="TwitterTweetResultMap">
        SELECT *
        FROM social_twitter_tweets
        INNER JOIN store ON social_twitter_tweets.user_id = store.ownerUserId
         WHERE store.shoppingMallId = #{locationId}
        ORDER BY timestamp DESC
        LIMIT #{maxItems}
    </select>

    <select id="getTweetsForStore" parameterType="string" resultType="TwitterTweet" resultMap="TwitterTweetResultMap">
        SELECT * FROM social_twitter_tweets WHERE user_id = #{userId} ORDER BY timestamp DESC LIMIT #{maxItems}
    </select>


    <resultMap type="TwitterConfig" id="TwitterConfigResultMap">
        <result property="mTokenKey" column="token_key"/>
        <result property="mTokenSecret" column="token_secret"/>
        <result property="mDescription" column="description"/>
        <result property="mUserName" column="username"/>
        <result property="mUserId" column="user_id"/>
    </resultMap>

    <resultMap type="TwitterTweet" id="TwitterTweetResultMap">
        <result property="mUserId" column="user_id"/>
        <result property="mTweetId" column="tweet_id"/>
        <result property="mTwitterUserId" column="twitter_user_id"/>
        <result property="mTwitterName" column="twitter_name"/>
        <result property="mTwitterUserName" column="twitter_user_name"/>
        <result property="mTweet" column="tweet"/>
        <result property="mMediaUrl" column="media_url"/>
        <result property="mProfileImage" column="profile_image"/>
        <result property="mTimeStamp" column="timestamp"/>
    </resultMap>
</mapper>
